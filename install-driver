#!/usr/bin/env bash

# shellcheck disable=SC2045,SC2059,SC2143
# shellcheck source=/dev/null

[[ $(source "/etc/os-release" 2>/dev/null; echo "$ID") == "clear-linux-os" ]] || exit 1

# Driver installer script for NVIDIA graphics on Clear Linux OS.
# Usage: ./install-driver latest|550|555|vulkan|<pathname>
#
# NVIDIA Driver Archive
#   https://download.nvidia.com/XFree86/Linux-x86_64/
#   https://www.nvidia.com/en-us/drivers/unix/
#
# Vulkan Driver Support
#   https://developer.nvidia.com/vulkan-driver
#
# CUDA Redistributable Driver Archive
#   https://developer.download.nvidia.com/compute/cuda/redist/nvidia_driver/linux-x86_64/

kernel=$(uname -r)
osver=$(source "/etc/os-release"; echo "$VERSION_ID")

# Exit if the "fix-nvidia-libGL-trigger.service" file is missing.
if [[ ! -f "/etc/systemd/system/fix-nvidia-libGL-trigger.service" ]]; then
    echo "Please run 'bash pre-install-driver' first."
    exit 1
fi

# Exit if dkms or the kernel-source is not installed.
if [[ ! -x "/usr/bin/dkms" ]]; then
    echo "The dkms package is not installed, exiting."
    exit 1
elif [[ ! -f "/usr/lib/modules/${kernel}/build/Makefile" ]]; then
    echo "The kernel source is not installed for ${kernel}, exiting."
    exit 1
fi

# On first use after OS install, perform check in the event "nomodeset"
# is passed to the kernel and attempting shortcut by not rebooting.
# The installer requires a non-graphical environment to run.

contflag=1 state=$(systemctl is-active graphical.target 2>&1)

if [[ "$state" == "active" ]]; then
    contflag=0
elif [[ -n $(pidof gnome-shell) || -n $(pidof xdg-desktop-portal) ]]; then
    contflag=0
fi

if [[ $contflag -eq 0 ]]; then
    echo "Run the pre-install-driver script with no arguments."
    echo "Then, login into multi-user mode to install the driver."
    exit 1
fi

###############################################################################

# Parse command-line arguments.
inst_file=""
path_regex1="NVIDIA-Linux-x86_64-.*\.run$"
path_regex2="nvidia_driver-linux-x86_64-.*-archive\.tar\.xz"
path_vulkan="vulkan-.*-linux$"

case "$1" in
  latest) echo "Retrieving latest information from the web."
          in=$(curl -sL "https://download.nvidia.com/XFree86/Linux-x86_64/latest.txt" | head -1);
          inst_url="https://download.nvidia.com/XFree86/Linux-x86_64/${in##* }"
          ;;
     550) inst_url="https://download.nvidia.com/XFree86/Linux-x86_64/550.107.02/NVIDIA-Linux-x86_64-550.107.02.run"
          ;;
     560) inst_url="https://us.download.nvidia.com/XFree86/Linux-x86_64/560.35.03/NVIDIA-Linux-x86_64-560.35.03.run"
          ;;
  vulkan) inst_url="https://developer.nvidia.com/downloads/vulkan-beta-5504065-linux"
          ;;
       *) if [[ "$1" =~ $path_regex1 ]]; then
              # Installation via a driver run file
              if [[ ! -f "$1" ]]; then
                  echo "ERROR: Cannot open '$1' (No such file)"
                  exit 1
              fi
              if [[ "$1" == *"grid"* || "$1" == *"vgpu"* || "$1" == *"kvm"* ]]; then
                  echo "ERROR: Cannot install '$1' (Not supported)"
                  exit 1
              fi
              inst_file="$1"
          elif [[ "$1" =~ $path_regex2 ]]; then
              # Installation via a CUDA redistributable driver file
              if [[ ! -f "$1" ]]; then
                  echo "ERROR: Cannot open '$1' (No such file)"
                  exit 1
              fi
              inst_file="$1"
          elif [[ "$1" =~ $path_vulkan ]]; then
              # Installation via a Vulkan driver file
              if [[ ! -f "$1" ]]; then
                  echo "ERROR: Cannot open '$1' (No such file)"
                  exit 1
              fi
              inst_file="$1"
          else
              echo "Usage: ${0##*/} latest|550|555|vulkan|<pathname>"
              exit 1
          fi
esac

# Download the driver installer from the web.
[[ -z ${inst_file} ]] && inst_file="${inst_url##*/}"
[[ -n ${SUDO_USER} ]] && user=$SUDO_USER || user=$USER

if [[ ! -s "$inst_file" ]]; then
    inst_file="Downloads/$inst_file"
    if [[ ! -s "$inst_file" ]]; then
        if [[ ! -d Downloads && ! -L Downloads ]]; then
            echo "Creating symbolic link." 
            DownloadPath="/home/${user}/Downloads"
            if [[ -e "/usr/bin/xdg-user-dir" ]]; then
                DownloadPath="$(xdg-user-dir DOWNLOAD)"
            fi
            if [[ ! -d "$DownloadPath" ]]; then
                mkdir -p "$DownloadPath"
                chown "$user:$user" "$DownloadPath"
                chmod 755 "$DownloadPath"
            fi
            ln -sfv "$DownloadPath" "Downloads"
        fi
        echo "Downloading ${inst_file##*/} from download.nvidia.com ..."
        curl -LO --output-dir "Downloads" "$inst_url"
        if [[ ! -f "$inst_file" || -n $(grep "404 - Not Found" "$inst_file") ]]; then
            rm -f "$inst_file"
            echo "ERROR: ${inst_file##*/} (No such file at download URL)"
            echo "https://download.nvidia.com/XFree86/Linux-x86_64/"
            echo "https://developer.download.nvidia.com/compute/cuda/redist/nvidia_driver/linux-x86_64/"
            exit 1
        fi
    fi
fi

nvver1=$(echo "$inst_file" | cut -f4 -d- | cut -f1 -d.)
nvver2=$(echo "$inst_file" | cut -f4 -d- | cut -f2 -d.)

apply_gpl_pfn_valid_patch=0
apply_gcc14_update=0

if [[ "$inst_file" =~ $path_vulkan ]]; then
    true  # pass - The path vulkan regex is checked first.
elif [[ ${nvver1} -le 545 ]]; then
    echo "ERROR: The ${nvver1} release is unsupported. Try 550 or later release."
    exit 1
elif [[ ${nvver1} -eq 550 && ${nvver2} -le 40 ]]; then
    apply_gpl_pfn_valid_patch=1
    apply_gcc14_update=1
elif [[ ${nvver1} -eq 550 && ${nvver2} -le 54 ]]; then
    apply_gcc14_update=1
fi

###############################################################################

# Test sudo and exit if wrong password or terminated via Ctrl-C.
sudo id >/dev/null || exit 2

# Create directories.
sudo mkdir -p /etc/X11
sudo mkdir -p /opt/nvidia/lib32
sudo mkdir -p /opt/nvidia/lib64
sudo mkdir -p /var/lib/dkms

# Allow save to /etc/X11/xorg.conf via NVIDIA settings as the normal user.
# E.g. Settings > X Server Display Configuration > Save to X Configuration File
[[ -f /etc/X11/xorg.conf ]] && sudo chown "$user" /etc/X11/xorg.conf
sudo chown "$user" /etc/X11

# Remove /etc/{egl,glvnd,nvidia}; created from prior repo revisions.
if [[ -L /usr/share/nvidia ]]; then
    sudo rm -rf /etc/{egl,glvnd,nvidia} /usr/share/nvidia
fi

# Remove development libraries {EGL, GLESv1_CM, GLESv2, GL, OpenCL, OpenGL}.
# They are restored by the fix-nvidia-libGL-trigger service.
if [[ ${osver} -ge 38270 ]]; then
    [[ -L /usr/lib64/libOpenCL.so    ]] && sudo rm -f /usr/lib{32,64}/libOpenCL.so
else
    [[ -L /usr/lib64/libEGL.so       ]] && sudo rm -f /usr/lib{32,64}/libEGL.so
    [[ -L /usr/lib64/libGLESv1_CM.so ]] && sudo rm -f /usr/lib{32,64}/libGLESv1_CM.so
    [[ -L /usr/lib64/libGLESv2.so    ]] && sudo rm -f /usr/lib{32,64}/libGLESv2.so
    [[ -L /usr/lib64/libGL.so        ]] && sudo rm -f /usr/lib{32,64}/libGL.so
    [[ -L /usr/lib64/libOpenCL.so    ]] && sudo rm -f /usr/lib{32,64}/libOpenCL.so
    [[ -L /usr/lib64/libOpenGL.so    ]] && sudo rm -f /usr/lib{32,64}/libOpenGL.so
fi

# Remove the vulkan producer libs, to be copied after installation.
sudo rm -f /usr/lib64/libnvidia-vulkan-producer.so.*

# Define arguments for the NVIDIA installer script.
args=""
args+=" --force-libglx-indirect"
args+=" --glvnd-egl-config-path=/usr/share/glvnd/egl_vendor.d"
args+=" --x-prefix=/opt/nvidia"
args+=" --x-library-path=/opt/nvidia/lib64"
args+=" --x-sysconfig-path=/etc/X11/xorg.conf.d"
args+=" --compat32-prefix=/opt/nvidia"
args+=" --compat32-libdir=lib32"
args+=" --opengl-prefix=/opt/nvidia"
args+=" --no-precompiled-interface"
args+=" --no-distro-scripts"
args+=" --no-cc-version-check"
args+=" --no-nouveau-check"
args+=" --silent"
args+=" --no-dkms"

sudo cp "check-kernel-dkms" /tmp/.

if [[ ${apply_gpl_pfn_valid_patch} -eq 1 ]]; then
    sudo cp "patches/nvidia-gpl-pfn_valid.patch" /tmp/.
fi
if [[ ${apply_gcc14_update} -eq 1 ]]; then
    sudo cp "patches/nvidia-drivers-gcc14.patch" /tmp/.
fi

# Remove all /usr/src/nvidia-* folders and /var/lib/dkms/nvidia/VERSION.
# This is necessary in case of prior gpl_pfn_valid patching.
sudo rm -fr /usr/src/nvidia-[0-9]*[0-9]
sudo rm -fr /var/lib/dkms/nvidia/[0-9]*[0-9]

# Install driver.
if [[ "$inst_file" =~ $path_regex1 || "$inst_file" =~ $path_vulkan ]]; then
    # Installation via a driver run file
    echo "Installing the NVIDIA proprietary driver..."

    # shellcheck disable=SC2086
    sudo CFLAGS="" CXXFLAGS="" IGNORE_PREEMPT_RT_PRESENCE=1 \
        bash -c "export PATH=/tmp:\$PATH; bash '$inst_file' $args 2>/dev/null"

    status=$?
else
    # Installation via a CUDA redistributable driver file
    inst_ver=$(echo "$inst_file" | cut -f4 -d-)
    echo "Uncompressing CUDA Redistributable Driver for Linux-$(uname -m) ${inst_ver}"
    mkdir -p "/tmp/nvidia-redist.$$"
    tar xJf "$inst_file" -C "/tmp/nvidia-redist.$$"

    echo "Installing the NVIDIA proprietary driver..."
    # shellcheck disable=SC2164
    cd /tmp/nvidia-redist.$$/*

    # Relocate files to match a run file installation
    mv CHANGELOG NVIDIA_Changelog
    mv MANIFEST .manifest
    mv README README.txt
    mv bin/* .
    mv docs html
    mv etc/* .
    mv lib/* .
    mv lib32 32
    mv man/man1/* .
    mv sbin/* .
    mv share/* .
    mv tests/glvnd libglvnd_install_checker
    mv tests/glvnd32 32/libglvnd_install_checker
    mv wine/* .
    rm -rf bin etc lib man sbin share tests wine

    # Create nvidia-persistenced-init.tar.bz2
    if [[ -d "src/nvidia-persistenced/init" ]]; then
        mv src/nvidia-persistenced/init nvidia-persistenced-init
        tar cjf nvidia-persistenced-init.tar.bz2 nvidia-persistenced-init
        rm -rf nvidia-persistenced-init src
    fi

    # Check if exist nvidia/rim folder
    if [[ -d "nvidia/rim" ]]; then
        mv nvidia/rim/* .
        rm -fr nvidia
    fi

    # Create pkg-history.txt
    ver=$(./nvidia-installer --version | awk '/version/ { print $NF; exit }')
    (   printf "Package history for NVIDIA-Linux-x86_64-${ver}-internal:\n\n"
        printf "NVIDIA-Linux-x86_64-${ver}-internal: Initial package\n\n"
        printf "NVIDIA-Linux-x86_64-${ver}: Added 32 bit compatibility libraries\n\n"
        printf "NVIDIA-Linux-x86_64-${ver}: Added Wine files\n\n"
    ) > pkg-history.txt; unset ver

    # Run the installer
    # shellcheck disable=SC2086
    sudo CFLAGS="" CXXFLAGS="" IGNORE_PREEMPT_RT_PRESENCE=1 \
        bash -c "export PATH=/tmp:\$PATH; ./nvidia-installer $args 2>/dev/null"

    status=$?

    # Clean up
    cd "/tmp" || exit
    sudo rm -rf "/tmp/nvidia-redist.$$"
fi

# Terminate here if the NVIDIA installation failed.
if [[ $status -ne 0 ]]; then
    echo "ERROR: Failed to the install the NVIDIA proprietary driver."
    echo "See /var/log/nvidia-installer.log for details."
    exit $status
else
    echo "The NVIDIA driver installation succeeded."
    echo
fi

module_dir=$(cd /usr/src; ls -1dr nvidia-*[0-9] | head -1)
dkms_module=${module_dir//-/\/}

# Fix GPL-incompatible module nvidia.ko uses GPL-only symbol __rcu_read_[un]lock.
(
    if [[ ${apply_gpl_pfn_valid_patch} -eq 1 && -f "/tmp/nvidia-gpl-pfn_valid.patch" ]]; then
        echo "Applying nvidia-gpl-pfn_valid.patch to /usr/src/${module_dir}"
        cd "/usr/src/${module_dir}"
        sudo patch -Np2 --no-backup-if-mismatch -i "/tmp/nvidia-gpl-pfn_valid.patch"
        sudo rm -f "/tmp/nvidia-gpl-pfn_valid.patch"
        echo
    fi
)

# Apply GCC14 support to conftest.sh.
(
    if [[ ${apply_gcc14_update} -eq 1 && -f "/tmp/nvidia-drivers-gcc14.patch" ]]; then
        echo "Applying nvidia-drivers-gcc14.patch to /usr/src/${module_dir}"
        cd "/usr/src/${module_dir}"
        sudo patch -Np2 --no-backup-if-mismatch -i "/tmp/nvidia-drivers-gcc14.patch"
        sudo rm -f "/tmp/nvidia-drivers-gcc14.patch"
        echo
    fi
)

# Register DKMS module.
echo "Registering the NVIDIA kernel module sources with DKMS."
sudo dkms add ${dkms_module}

# Build kernel modules.
echo "Building the NVIDIA kernel modules."
sudo "/tmp/check-kernel-dkms" || exit $?
sudo rm -f "/tmp/check-kernel-dkms"

# Configure NVD_BACKEND, system-wide.
sudo mkdir -p "/etc/environment.d"
sudo tee "/etc/environment.d/10-nvidia-vaapi-driver.conf" >/dev/null <<'EOF'
# The EGL backend (which is still the default) was broken in the 525 driver
# series, so the direct backend is necessary for decoding to work.
NVD_BACKEND=direct

# Wayland fix for integrated AMD/Intel GPU with optimus.
# https://github.com/elFarto/nvidia-vaapi-driver/issues/247
NVD_GPU=0
EOF

# Default to "gnome-wayland" for the login session.
if [[ ${osver} -ge 38270 ]]; then
    sudo mkdir -p   "/var/lib/AccountsService/users"
    sudo chown 0700 "/var/lib/AccountsService/users"

    userconf="/var/lib/AccountsService/users/$user"
    sudo touch "$userconf"
    lncount=$(sudo wc -l "$userconf")

    if [[ ${lncount% *} -eq 0 ]]; then
        echo "Default to 'gnome-wayland' for the login session."
        sudo tee "$userconf" >/dev/null <<"EOF"
[User]
Session=gnome-wayland
SystemAccount=false
EOF
    fi
fi

# Disable the NVIDIA_PRESERVE_VIDEO_MEMORY_ALLOCATIONS check in 61-gdm.rules.
if [[ -e /usr/lib/udev/rules.d/61-gdm.rules ]]; then
    sudo mkdir -p /etc/udev/rules.d
    awk '
        /NVIDIA_PRESERVE_VIDEO_MEMORY_ALLOCATIONS/ { printf "#%s\n", $0; next } 
        /^GOTO="gdm_disable_wayland"/ { printf "GOTO=\"gdm_end\"\n"; next }
        { print $0 }
    ' /usr/lib/udev/rules.d/61-gdm.rules \
    | sudo tee /etc/udev/rules.d/61-gdm.rules >/dev/null
fi

if [[ ${nvver1} -ge 545 ]]; then
    # Remove symbolic link left behind. The helper library was removed in 545.23.06,
    # no longer needed by the Wayland WSI.
    sudo rm -f /usr/lib64/libnvidia-vulkan-producer.so
else
    # Fix missing NVIDIA libraries in /usr/lib64/.
    sudo cp -a /opt/nvidia/lib64/libnvidia-vulkan-producer.so.* /usr/lib64/. 2>/dev/null
fi

if [[ -e /usr/lib64/libnvidia-allocator.so.1 ]]; then
    if [[ ! -e /usr/lib64/gbm/nvidia-drm_gbm.so ]]; then
        sudo mkdir -p /usr/lib64/gbm
        sudo ln -sf /usr/lib64/libnvidia-allocator.so.1 /usr/lib64/gbm/nvidia-drm_gbm.so
    fi
fi

sudo ldconfig

###############################################################################

# Update the X11 output class configuration file, making NVIDIA the primary GPU.
echo "Updating the X11 output class configuration file."
sudo tee "/etc/X11/xorg.conf.d/nvidia-drm-outputclass.conf" >/dev/null <<'EOF'
Section "OutputClass"
    Identifier "nvidia"
    MatchDriver "nvidia-drm"
    Driver "nvidia"
    Option "AllowEmptyInitialConfiguration"
    Option "PrimaryGPU" "yes" # This can be commented if wanted Intel as primary GPU
    Option "SLI" "Auto"
    Option "BaseMosaic" "on"
EndSection

Section "OutputClass"
    Identifier "intel"
    MatchDriver "i915"
    Driver "modesetting"
    Option "AccelMethod" "none" # Comment when using Intel as primary
EndSection
EOF

# Reload systemd and run the trigger service.
echo "Running the fix-nvidia-libGL-trigger service."
sudo systemctl daemon-reload
sudo systemctl start fix-nvidia-libGL-trigger.service

###############################################################################

# Finish.
if [[ ${USER} != "root" ]]; then
    # The $user variable is set to $SUDO_USER or $USER above.
    gpucache_list1=$(find /home/${user}/.config -name GPUCache 2>/dev/null)
    gpucache_list2=$(find /home/${user}/.local -name GPUCache 2>/dev/null)
    if [[ -n "$gpucache_list1" || -n "$gpucache_list2" ]]; then
        echo "Clearing GPUCache for Electron applications."
        rm -fr $gpucache_list1 $gpucache_list2 2>/dev/null
    fi
    echo "Updating the flatpak user runtime."
    flatpak update --user -y
fi

sync

echo ""
echo "On Optimus-based laptops, edit /etc/X11/xorg.conf.d/nvidia-drm-outputclass.conf"
echo "and comment two lines 'PrimaryGPU'/'AccelMethod' to use Intel as the primary GPU."
echo "Remove also /etc/X11/xorg.conf if the file exist."
echo ""
echo "Run 'sudo reboot' afterwards."
echo ""

